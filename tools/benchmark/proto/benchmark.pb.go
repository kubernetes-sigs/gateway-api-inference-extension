// Generate the proto:
// protoc --go_out=. --go_opt=paths=source_relative benchmark.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.1
// source: benchmark.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A wrapper to hold the global benchmark configuration. This is used to generate the Helm chart values.yaml
type Helm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global *Benchmark `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
}

func (x *Helm) Reset() {
	*x = Helm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Helm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Helm) ProtoMessage() {}

func (x *Helm) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Helm.ProtoReflect.Descriptor instead.
func (*Helm) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *Helm) GetGlobal() *Benchmark {
	if x != nil {
		return x.Global
	}
	return nil
}

type Benchmarks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Benchmarks []*Benchmark `protobuf:"bytes,1,rep,name=benchmarks,proto3" json:"benchmarks,omitempty"`
}

func (x *Benchmarks) Reset() {
	*x = Benchmarks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Benchmarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Benchmarks) ProtoMessage() {}

func (x *Benchmarks) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Benchmarks.ProtoReflect.Descriptor instead.
func (*Benchmarks) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *Benchmarks) GetBenchmarks() []*Benchmark {
	if x != nil {
		return x.Benchmarks
	}
	return nil
}

// Benchmark captures the information of a benchmark run, and will be persisted to the DB for data
// analysis.
type Benchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	BenchmarkCase *BenchmarkCase `protobuf:"bytes,1,opt,name=benchmark_case,json=benchmarkCase,proto3" json:"benchmark_case,omitempty"`
	// Required. User facing configuration to configure the benchmark manifests.
	Config *BenchmarkConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Optional. Result is automatically collected by the benchmark automation framework.
	Result *BenchmarkResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// Optional. Autogenerated by the tool.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Optional. Name is used for matching the base_benchmark_name in the same Benchmarks config file.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The name of the parent benchmark configuration to base on.
	BaseBenchmarkName string `protobuf:"bytes,6,opt,name=base_benchmark_name,json=baseBenchmarkName,proto3" json:"base_benchmark_name,omitempty"`
}

func (x *Benchmark) Reset() {
	*x = Benchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Benchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Benchmark) ProtoMessage() {}

func (x *Benchmark) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Benchmark.ProtoReflect.Descriptor instead.
func (*Benchmark) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *Benchmark) GetBenchmarkCase() *BenchmarkCase {
	if x != nil {
		return x.BenchmarkCase
	}
	return nil
}

func (x *Benchmark) GetConfig() *BenchmarkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Benchmark) GetResult() *BenchmarkResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Benchmark) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Benchmark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Benchmark) GetBaseBenchmarkName() string {
	if x != nil {
		return x.BaseBenchmarkName
	}
	return ""
}

type BenchmarkCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BenchmarkCase) Reset() {
	*x = BenchmarkCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkCase) ProtoMessage() {}

func (x *BenchmarkCase) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkCase.ProtoReflect.Descriptor instead.
func (*BenchmarkCase) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{3}
}

func (x *BenchmarkCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BenchmarkConfig is the main user facing configuration for the benchmark run. It is used to
// generate benchmark manifests.
type BenchmarkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Configuration about the load balancer.
	LoadBalancer *LoadBalancer `protobuf:"bytes,1,opt,name=load_balancer,json=loadBalancer,proto3" json:"load_balancer,omitempty"`
	// Required. Configuration about the model server deployment.
	ModelServer *ModelServer `protobuf:"bytes,2,opt,name=model_server,json=modelServer,proto3" json:"model_server,omitempty"`
	// Required. Configuration about the benchmark tooling.
	BenchmarkTool *BenchmarkTool `protobuf:"bytes,3,opt,name=benchmark_tool,json=benchmarkTool,proto3" json:"benchmark_tool,omitempty"`
	// Optional.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *BenchmarkConfig) Reset() {
	*x = BenchmarkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkConfig) ProtoMessage() {}

func (x *BenchmarkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkConfig.ProtoReflect.Descriptor instead.
func (*BenchmarkConfig) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{4}
}

func (x *BenchmarkConfig) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		return x.LoadBalancer
	}
	return nil
}

func (x *BenchmarkConfig) GetModelServer() *ModelServer {
	if x != nil {
		return x.ModelServer
	}
	return nil
}

func (x *BenchmarkConfig) GetBenchmarkTool() *BenchmarkTool {
	if x != nil {
		return x.BenchmarkTool
	}
	return nil
}

func (x *BenchmarkConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ModelServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Default: "vllm/vllm-openai:latest"
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Optional. Type of the accelerator, e.g, nvidia-tesla-a100, nvidia-l4, etc.
	Accelerator string `protobuf:"bytes,2,opt,name=accelerator,proto3" json:"accelerator,omitempty"`
	// Optional. Default: 3
	Replicas int32 `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Types that are assignable to Type:
	//
	//	*ModelServer_Vllm
	Type isModelServer_Type `protobuf_oneof:"type"`
}

func (x *ModelServer) Reset() {
	*x = ModelServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelServer) ProtoMessage() {}

func (x *ModelServer) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelServer.ProtoReflect.Descriptor instead.
func (*ModelServer) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{5}
}

func (x *ModelServer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ModelServer) GetAccelerator() string {
	if x != nil {
		return x.Accelerator
	}
	return ""
}

func (x *ModelServer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (m *ModelServer) GetType() isModelServer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ModelServer) GetVllm() *VLLM {
	if x, ok := x.GetType().(*ModelServer_Vllm); ok {
		return x.Vllm
	}
	return nil
}

type isModelServer_Type interface {
	isModelServer_Type()
}

type ModelServer_Vllm struct {
	Vllm *VLLM `protobuf:"bytes,4,opt,name=vllm,proto3,oneof"`
}

func (*ModelServer_Vllm) isModelServer_Type() {}

type VLLM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Default: "1"
	TensorParallelism string `protobuf:"bytes,1,opt,name=tensor_parallelism,json=tensorParallelism,proto3" json:"tensor_parallelism,omitempty"`
	// Optional. Default: "3"
	MaxLoras string `protobuf:"bytes,2,opt,name=max_loras,json=maxLoras,proto3" json:"max_loras,omitempty"`
	// Optional. Default: "meta-llama/Llama-2-7b-hf"
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Optional. Default: 16
	LoraRank string `protobuf:"bytes,4,opt,name=lora_rank,json=loraRank,proto3" json:"lora_rank,omitempty"`
	// Optional. Default: "0".
	// If set to "1", the V1 model is used.
	V1 string `protobuf:"bytes,5,opt,name=v1,proto3" json:"v1,omitempty"`
}

func (x *VLLM) Reset() {
	*x = VLLM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VLLM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VLLM) ProtoMessage() {}

func (x *VLLM) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VLLM.ProtoReflect.Descriptor instead.
func (*VLLM) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{6}
}

func (x *VLLM) GetTensorParallelism() string {
	if x != nil {
		return x.TensorParallelism
	}
	return ""
}

func (x *VLLM) GetMaxLoras() string {
	if x != nil {
		return x.MaxLoras
	}
	return ""
}

func (x *VLLM) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *VLLM) GetLoraRank() string {
	if x != nil {
		return x.LoraRank
	}
	return ""
}

func (x *VLLM) GetV1() string {
	if x != nil {
		return x.V1
	}
	return ""
}

type BenchmarkTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Types that are assignable to Type:
	//
	//	*BenchmarkTool_Lpg
	Type isBenchmarkTool_Type `protobuf_oneof:"Type"`
}

func (x *BenchmarkTool) Reset() {
	*x = BenchmarkTool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkTool) ProtoMessage() {}

func (x *BenchmarkTool) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkTool.ProtoReflect.Descriptor instead.
func (*BenchmarkTool) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{7}
}

func (x *BenchmarkTool) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (m *BenchmarkTool) GetType() isBenchmarkTool_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *BenchmarkTool) GetLpg() *LPG {
	if x, ok := x.GetType().(*BenchmarkTool_Lpg); ok {
		return x.Lpg
	}
	return nil
}

type isBenchmarkTool_Type interface {
	isBenchmarkTool_Type()
}

type BenchmarkTool_Lpg struct {
	Lpg *LPG `protobuf:"bytes,2,opt,name=lpg,proto3,oneof"`
}

func (*BenchmarkTool_Lpg) isBenchmarkTool_Type() {}

type LPG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Which input dataset to use, default to
	// ShareGPT_V3_unfiltered_cleaned_split.
	// Default: "sharegpt_v3_unfiltered_cleaned_split"
	Dataset string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Optional. Which models to use, default to meta-llama/Llama-2-7b-hf
	// Default: "meta-llama/Llama-2-7b-hf"
	Models string `protobuf:"bytes,3,opt,name=models,proto3" json:"models,omitempty"`
	// Optional. Default: "model-server-service.benchmark-catalog.svc.cluster.local"
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// Optional. Default: "8081"
	Port string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	// Required.
	RequestRates string `protobuf:"bytes,6,opt,name=request_rates,json=requestRates,proto3" json:"request_rates,omitempty"`
	// Optional. Default: "60"
	BenchmarkTimeSeconds string `protobuf:"bytes,7,opt,name=benchmark_time_seconds,json=benchmarkTimeSeconds,proto3" json:"benchmark_time_seconds,omitempty"`
	// Optional. Default: "1024"
	OutputLength  string `protobuf:"bytes,8,opt,name=output_length,json=outputLength,proto3" json:"output_length,omitempty"`
	Tokenizer     string `protobuf:"bytes,9,opt,name=tokenizer,proto3" json:"tokenizer,omitempty"`
	WarmupSeconds string `protobuf:"bytes,10,opt,name=warmup_seconds,json=warmupSeconds,proto3" json:"warmup_seconds,omitempty"`
}

func (x *LPG) Reset() {
	*x = LPG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPG) ProtoMessage() {}

func (x *LPG) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPG.ProtoReflect.Descriptor instead.
func (*LPG) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{8}
}

func (x *LPG) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *LPG) GetModels() string {
	if x != nil {
		return x.Models
	}
	return ""
}

func (x *LPG) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LPG) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *LPG) GetRequestRates() string {
	if x != nil {
		return x.RequestRates
	}
	return ""
}

func (x *LPG) GetBenchmarkTimeSeconds() string {
	if x != nil {
		return x.BenchmarkTimeSeconds
	}
	return ""
}

func (x *LPG) GetOutputLength() string {
	if x != nil {
		return x.OutputLength
	}
	return ""
}

func (x *LPG) GetTokenizer() string {
	if x != nil {
		return x.Tokenizer
	}
	return ""
}

func (x *LPG) GetWarmupSeconds() string {
	if x != nil {
		return x.WarmupSeconds
	}
	return ""
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LoadBalancer_K8SService
	//	*LoadBalancer_Gateway
	Type isLoadBalancer_Type `protobuf_oneof:"type"`
	// Define boolean flags to tell which type is enabled. This is due to a bug in Helm that you must
	// explicitly set whether a field is enabled or not. A non-existing field is considered enabled
	// due to the bug https://github.com/helm/helm/issues/10296.
	K8SServiceEnabled           bool `protobuf:"varint,4,opt,name=k8s_service_enabled,json=k8sServiceEnabled,proto3" json:"k8s_service_enabled,omitempty"`
	GatewayEnabled              bool `protobuf:"varint,5,opt,name=gateway_enabled,json=gatewayEnabled,proto3" json:"gateway_enabled,omitempty"`
	GatewayEnvoyEnabled         bool `protobuf:"varint,6,opt,name=gateway_envoy_enabled,json=gatewayEnvoyEnabled,proto3" json:"gateway_envoy_enabled,omitempty"`
	GatewayGkeGatewayEnabled    bool `protobuf:"varint,7,opt,name=gateway_gke_gateway_enabled,json=gatewayGkeGatewayEnabled,proto3" json:"gateway_gke_gateway_enabled,omitempty"`
	GatewayEnvoyEppEnabled      bool `protobuf:"varint,8,opt,name=gateway_envoy_epp_enabled,json=gatewayEnvoyEppEnabled,proto3" json:"gateway_envoy_epp_enabled,omitempty"`
	GatewayEnvoyLbPolicyEnabled bool `protobuf:"varint,9,opt,name=gateway_envoy_lb_policy_enabled,json=gatewayEnvoyLbPolicyEnabled,proto3" json:"gateway_envoy_lb_policy_enabled,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{9}
}

func (m *LoadBalancer) GetType() isLoadBalancer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LoadBalancer) GetK8SService() *K8SService {
	if x, ok := x.GetType().(*LoadBalancer_K8SService); ok {
		return x.K8SService
	}
	return nil
}

func (x *LoadBalancer) GetGateway() *Gateway {
	if x, ok := x.GetType().(*LoadBalancer_Gateway); ok {
		return x.Gateway
	}
	return nil
}

func (x *LoadBalancer) GetK8SServiceEnabled() bool {
	if x != nil {
		return x.K8SServiceEnabled
	}
	return false
}

func (x *LoadBalancer) GetGatewayEnabled() bool {
	if x != nil {
		return x.GatewayEnabled
	}
	return false
}

func (x *LoadBalancer) GetGatewayEnvoyEnabled() bool {
	if x != nil {
		return x.GatewayEnvoyEnabled
	}
	return false
}

func (x *LoadBalancer) GetGatewayGkeGatewayEnabled() bool {
	if x != nil {
		return x.GatewayGkeGatewayEnabled
	}
	return false
}

func (x *LoadBalancer) GetGatewayEnvoyEppEnabled() bool {
	if x != nil {
		return x.GatewayEnvoyEppEnabled
	}
	return false
}

func (x *LoadBalancer) GetGatewayEnvoyLbPolicyEnabled() bool {
	if x != nil {
		return x.GatewayEnvoyLbPolicyEnabled
	}
	return false
}

type isLoadBalancer_Type interface {
	isLoadBalancer_Type()
}

type LoadBalancer_K8SService struct {
	K8SService *K8SService `protobuf:"bytes,1,opt,name=k8s_service,json=k8sService,proto3,oneof"`
}

type LoadBalancer_Gateway struct {
	Gateway *Gateway `protobuf:"bytes,2,opt,name=gateway,proto3,oneof"`
}

func (*LoadBalancer_K8SService) isLoadBalancer_Type() {}

func (*LoadBalancer_Gateway) isLoadBalancer_Type() {}

// By default the gateway name is `model-server-gateway` and port is `8081`.
type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Gateway_Envoy
	//	*Gateway_GkeGateway
	Type                       isGateway_Type `protobuf_oneof:"type"`
	FullDuplexStreamingEnabled bool           `protobuf:"varint,3,opt,name=full_duplex_streaming_enabled,json=fullDuplexStreamingEnabled,proto3" json:"full_duplex_streaming_enabled,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{10}
}

func (m *Gateway) GetType() isGateway_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Gateway) GetEnvoy() *Envoy {
	if x, ok := x.GetType().(*Gateway_Envoy); ok {
		return x.Envoy
	}
	return nil
}

func (x *Gateway) GetGkeGateway() *GKEGateway {
	if x, ok := x.GetType().(*Gateway_GkeGateway); ok {
		return x.GkeGateway
	}
	return nil
}

func (x *Gateway) GetFullDuplexStreamingEnabled() bool {
	if x != nil {
		return x.FullDuplexStreamingEnabled
	}
	return false
}

type isGateway_Type interface {
	isGateway_Type()
}

type Gateway_Envoy struct {
	Envoy *Envoy `protobuf:"bytes,1,opt,name=envoy,proto3,oneof"`
}

type Gateway_GkeGateway struct {
	GkeGateway *GKEGateway `protobuf:"bytes,2,opt,name=gke_gateway,json=gkeGateway,proto3,oneof"`
}

func (*Gateway_Envoy) isGateway_Type() {}

func (*Gateway_GkeGateway) isGateway_Type() {}

type Envoy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Envoy_Epp
	//	*Envoy_LbPolicy
	Type isEnvoy_Type `protobuf_oneof:"type"`
}

func (x *Envoy) Reset() {
	*x = Envoy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envoy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envoy) ProtoMessage() {}

func (x *Envoy) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envoy.ProtoReflect.Descriptor instead.
func (*Envoy) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{11}
}

func (m *Envoy) GetType() isEnvoy_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Envoy) GetEpp() *EPP {
	if x, ok := x.GetType().(*Envoy_Epp); ok {
		return x.Epp
	}
	return nil
}

func (x *Envoy) GetLbPolicy() string {
	if x, ok := x.GetType().(*Envoy_LbPolicy); ok {
		return x.LbPolicy
	}
	return ""
}

type isEnvoy_Type interface {
	isEnvoy_Type()
}

type Envoy_Epp struct {
	Epp *EPP `protobuf:"bytes,1,opt,name=epp,proto3,oneof"`
}

type Envoy_LbPolicy struct {
	// Load balancing policies supported by Envoy: https://gateway.envoyproxy.io/docs/tasks/traffic/load-balancing/
	LbPolicy string `protobuf:"bytes,2,opt,name=lb_policy,json=lbPolicy,proto3,oneof"`
}

func (*Envoy_Epp) isEnvoy_Type() {}

func (*Envoy_LbPolicy) isEnvoy_Type() {}

type GKEGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Epp *EPP `protobuf:"bytes,1,opt,name=epp,proto3" json:"epp,omitempty"`
}

func (x *GKEGateway) Reset() {
	*x = GKEGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GKEGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GKEGateway) ProtoMessage() {}

func (x *GKEGateway) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GKEGateway.ProtoReflect.Descriptor instead.
func (*GKEGateway) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{12}
}

func (x *GKEGateway) GetEpp() *EPP {
	if x != nil {
		return x.Epp
	}
	return nil
}

type EPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Default: "us-central1-docker.pkg.dev/k8s-staging-images/llm-instance-gateway/epp:main"
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Optional. Default 50ms
	RefreshMetricsInterval string `protobuf:"bytes,2,opt,name=refresh_metrics_interval,json=refreshMetricsInterval,proto3" json:"refresh_metrics_interval,omitempty"`
}

func (x *EPP) Reset() {
	*x = EPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EPP) ProtoMessage() {}

func (x *EPP) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EPP.ProtoReflect.Descriptor instead.
func (*EPP) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{13}
}

func (x *EPP) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *EPP) GetRefreshMetricsInterval() string {
	if x != nil {
		return x.RefreshMetricsInterval
	}
	return ""
}

// By default the service is in the same namespace as the model server and lpg.
// The service name is `model-server-service` and port is `8081`.
type K8SService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *K8SService) Reset() {
	*x = K8SService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SService) ProtoMessage() {}

func (x *K8SService) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SService.ProtoReflect.Descriptor instead.
func (*K8SService) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{14}
}

type BenchmarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	Stats []*Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *BenchmarkResult) Reset() {
	*x = BenchmarkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResult) ProtoMessage() {}

func (x *BenchmarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResult.ProtoReflect.Descriptor instead.
func (*BenchmarkResult) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{15}
}

func (x *BenchmarkResult) GetStats() []*Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	RequestRate float32 `protobuf:"fixed32,1,opt,name=request_rate,json=requestRate,proto3" json:"request_rate,omitempty"`
	// Optional.
	RequestLatency *Metric `protobuf:"bytes,2,opt,name=request_latency,json=requestLatency,proto3" json:"request_latency,omitempty"`
	// Optional.
	Throughput *Metric `protobuf:"bytes,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	// Optional.
	InputLength *Metric `protobuf:"bytes,4,opt,name=input_length,json=inputLength,proto3" json:"input_length,omitempty"`
	// Optional.
	OutputLength *Metric `protobuf:"bytes,5,opt,name=output_length,json=outputLength,proto3" json:"output_length,omitempty"`
	// Optional.
	Ttft *Metric `protobuf:"bytes,6,opt,name=ttft,proto3" json:"ttft,omitempty"`
	// Optional.
	Tpot *Metric `protobuf:"bytes,7,opt,name=tpot,proto3" json:"tpot,omitempty"`
	// Optional.
	ModelServerMetrics []*Metric `protobuf:"bytes,8,rep,name=model_server_metrics,json=modelServerMetrics,proto3" json:"model_server_metrics,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{16}
}

func (x *Stat) GetRequestRate() float32 {
	if x != nil {
		return x.RequestRate
	}
	return 0
}

func (x *Stat) GetRequestLatency() *Metric {
	if x != nil {
		return x.RequestLatency
	}
	return nil
}

func (x *Stat) GetThroughput() *Metric {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *Stat) GetInputLength() *Metric {
	if x != nil {
		return x.InputLength
	}
	return nil
}

func (x *Stat) GetOutputLength() *Metric {
	if x != nil {
		return x.OutputLength
	}
	return nil
}

func (x *Stat) GetTtft() *Metric {
	if x != nil {
		return x.Ttft
	}
	return nil
}

func (x *Stat) GetTpot() *Metric {
	if x != nil {
		return x.Tpot
	}
	return nil
}

func (x *Stat) GetModelServerMetrics() []*Metric {
	if x != nil {
		return x.ModelServerMetrics
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional.
	Mean float32 `protobuf:"fixed32,2,opt,name=mean,proto3" json:"mean,omitempty"`
	// Optional.
	Median float32 `protobuf:"fixed32,3,opt,name=median,proto3" json:"median,omitempty"`
	// Optional.
	Sd float32 `protobuf:"fixed32,4,opt,name=sd,proto3" json:"sd,omitempty"`
	// Optional.
	Min float32 `protobuf:"fixed32,5,opt,name=min,proto3" json:"min,omitempty"`
	// Optional.
	Max float32 `protobuf:"fixed32,6,opt,name=max,proto3" json:"max,omitempty"`
	// Optional.
	P90 float32 `protobuf:"fixed32,7,opt,name=p90,proto3" json:"p90,omitempty"`
	// Optional.
	P99 float32 `protobuf:"fixed32,8,opt,name=p99,proto3" json:"p99,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{17}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetMean() float32 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Metric) GetMedian() float32 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *Metric) GetSd() float32 {
	if x != nil {
		return x.Sd
	}
	return 0
}

func (x *Metric) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Metric) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Metric) GetP90() float32 {
	if x != nil {
		return x.P90
	}
	return 0
}

func (x *Metric) GetP99() float32 {
	if x != nil {
		return x.P99
	}
	return 0
}

var File_benchmark_proto protoreflect.FileDescriptor

var file_benchmark_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22,
	0x48, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0a, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x09, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x0d, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x45, 0x0a, 0x0d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x01, 0x0a, 0x0f, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0d,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74,
	0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x6c,
	0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4c, 0x4c, 0x4d, 0x48,
	0x00, 0x52, 0x04, 0x76, 0x6c, 0x6c, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x04, 0x56, 0x4c, 0x4c, 0x4d, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x6f, 0x72, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c,
	0x6f, 0x72, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x72, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x72, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x31, 0x22, 0x57, 0x0a, 0x0d, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x03, 0x6c, 0x70, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x50,
	0x47, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x70, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xa0, 0x02, 0x0a, 0x03, 0x4c, 0x50, 0x47, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x6b, 0x38, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x38, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x38,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6b, 0x38, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x6e, 0x76, 0x6f, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x67, 0x6b, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x6b, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x65, 0x70, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x45, 0x70, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x44, 0x0a, 0x1f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x76,
	0x6f, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x67,
	0x6b, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x4b, 0x45, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x67, 0x6b, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x05, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x12,
	0x28, 0x0a, 0x03, 0x65, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x50, 0x50, 0x48, 0x00, 0x52, 0x03, 0x65, 0x70, 0x70, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x62, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x34, 0x0a, 0x0a, 0x47, 0x4b, 0x45, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x26,
	0x0a, 0x03, 0x65, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x50,
	0x50, 0x52, 0x03, 0x65, 0x70, 0x70, 0x22, 0x55, 0x0a, 0x03, 0x45, 0x50, 0x50, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x0c, 0x0a,
	0x0a, 0x4b, 0x38, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x04,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3c,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x74, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x04, 0x74, 0x74, 0x66, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x70, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x04, 0x74, 0x70, 0x6f, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x73, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70,
	0x39, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x39, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x70, 0x39, 0x39, 0x42, 0x11, 0x5a, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_benchmark_proto_rawDescOnce sync.Once
	file_benchmark_proto_rawDescData = file_benchmark_proto_rawDesc
)

func file_benchmark_proto_rawDescGZIP() []byte {
	file_benchmark_proto_rawDescOnce.Do(func() {
		file_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_benchmark_proto_rawDescData)
	})
	return file_benchmark_proto_rawDescData
}

var file_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_benchmark_proto_goTypes = []interface{}{
	(*Helm)(nil),                  // 0: benchmark.proto.Helm
	(*Benchmarks)(nil),            // 1: benchmark.proto.Benchmarks
	(*Benchmark)(nil),             // 2: benchmark.proto.Benchmark
	(*BenchmarkCase)(nil),         // 3: benchmark.proto.BenchmarkCase
	(*BenchmarkConfig)(nil),       // 4: benchmark.proto.BenchmarkConfig
	(*ModelServer)(nil),           // 5: benchmark.proto.ModelServer
	(*VLLM)(nil),                  // 6: benchmark.proto.VLLM
	(*BenchmarkTool)(nil),         // 7: benchmark.proto.BenchmarkTool
	(*LPG)(nil),                   // 8: benchmark.proto.LPG
	(*LoadBalancer)(nil),          // 9: benchmark.proto.LoadBalancer
	(*Gateway)(nil),               // 10: benchmark.proto.Gateway
	(*Envoy)(nil),                 // 11: benchmark.proto.Envoy
	(*GKEGateway)(nil),            // 12: benchmark.proto.GKEGateway
	(*EPP)(nil),                   // 13: benchmark.proto.EPP
	(*K8SService)(nil),            // 14: benchmark.proto.K8sService
	(*BenchmarkResult)(nil),       // 15: benchmark.proto.BenchmarkResult
	(*Stat)(nil),                  // 16: benchmark.proto.Stat
	(*Metric)(nil),                // 17: benchmark.proto.Metric
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_benchmark_proto_depIdxs = []int32{
	2,  // 0: benchmark.proto.Helm.global:type_name -> benchmark.proto.Benchmark
	2,  // 1: benchmark.proto.Benchmarks.benchmarks:type_name -> benchmark.proto.Benchmark
	3,  // 2: benchmark.proto.Benchmark.benchmark_case:type_name -> benchmark.proto.BenchmarkCase
	4,  // 3: benchmark.proto.Benchmark.config:type_name -> benchmark.proto.BenchmarkConfig
	15, // 4: benchmark.proto.Benchmark.result:type_name -> benchmark.proto.BenchmarkResult
	18, // 5: benchmark.proto.Benchmark.start_time:type_name -> google.protobuf.Timestamp
	9,  // 6: benchmark.proto.BenchmarkConfig.load_balancer:type_name -> benchmark.proto.LoadBalancer
	5,  // 7: benchmark.proto.BenchmarkConfig.model_server:type_name -> benchmark.proto.ModelServer
	7,  // 8: benchmark.proto.BenchmarkConfig.benchmark_tool:type_name -> benchmark.proto.BenchmarkTool
	6,  // 9: benchmark.proto.ModelServer.vllm:type_name -> benchmark.proto.VLLM
	8,  // 10: benchmark.proto.BenchmarkTool.lpg:type_name -> benchmark.proto.LPG
	14, // 11: benchmark.proto.LoadBalancer.k8s_service:type_name -> benchmark.proto.K8sService
	10, // 12: benchmark.proto.LoadBalancer.gateway:type_name -> benchmark.proto.Gateway
	11, // 13: benchmark.proto.Gateway.envoy:type_name -> benchmark.proto.Envoy
	12, // 14: benchmark.proto.Gateway.gke_gateway:type_name -> benchmark.proto.GKEGateway
	13, // 15: benchmark.proto.Envoy.epp:type_name -> benchmark.proto.EPP
	13, // 16: benchmark.proto.GKEGateway.epp:type_name -> benchmark.proto.EPP
	16, // 17: benchmark.proto.BenchmarkResult.stats:type_name -> benchmark.proto.Stat
	17, // 18: benchmark.proto.Stat.request_latency:type_name -> benchmark.proto.Metric
	17, // 19: benchmark.proto.Stat.throughput:type_name -> benchmark.proto.Metric
	17, // 20: benchmark.proto.Stat.input_length:type_name -> benchmark.proto.Metric
	17, // 21: benchmark.proto.Stat.output_length:type_name -> benchmark.proto.Metric
	17, // 22: benchmark.proto.Stat.ttft:type_name -> benchmark.proto.Metric
	17, // 23: benchmark.proto.Stat.tpot:type_name -> benchmark.proto.Metric
	17, // 24: benchmark.proto.Stat.model_server_metrics:type_name -> benchmark.proto.Metric
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_benchmark_proto_init() }
func file_benchmark_proto_init() {
	if File_benchmark_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_benchmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Helm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Benchmarks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Benchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VLLM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkTool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LPG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envoy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GKEGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_benchmark_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ModelServer_Vllm)(nil),
	}
	file_benchmark_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BenchmarkTool_Lpg)(nil),
	}
	file_benchmark_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*LoadBalancer_K8SService)(nil),
		(*LoadBalancer_Gateway)(nil),
	}
	file_benchmark_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Gateway_Envoy)(nil),
		(*Gateway_GkeGateway)(nil),
	}
	file_benchmark_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Envoy_Epp)(nil),
		(*Envoy_LbPolicy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_benchmark_proto_goTypes,
		DependencyIndexes: file_benchmark_proto_depIdxs,
		MessageInfos:      file_benchmark_proto_msgTypes,
	}.Build()
	File_benchmark_proto = out.File
	file_benchmark_proto_rawDesc = nil
	file_benchmark_proto_goTypes = nil
	file_benchmark_proto_depIdxs = nil
}
